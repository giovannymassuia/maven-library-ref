name: Build, Publish, and Release

on:
  workflow_dispatch:

jobs:
  build_publish_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'oracle'
          java-version: '21'

      # Extract version from pom.xml
      - name: Get the version
        run: echo "PROJECT_VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_ENV

      # Build the code
      - name: Build with Maven
        run: mvn clean install

      # Publish to GitHub Package Repository
      - name: Publish to GitHub Package Repository
        run: mvn deploy -DskipTests=true -P github-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            
      # Tag the new version
      - name: Create Tag
        run: git tag ${{ env.PROJECT_VERSION }}

      # Push the new tag
      - name: Push Tag
        run: git push origin ${{ env.PROJECT_VERSION }}

      # Extract changelog for current version
      - name: Extract changelog for current version
        id: extract-changelog
        run: |
          # Extract the section for the current version from CHANGELOG.md
          CHANGELOG=$(sed -n "/^## \[${{ env.PROJECT_VERSION }}\]/,/## \[/p" CHANGELOG.md | sed '$d')
          # Use ::set-output to create an output variable for the step
          echo "$CHANGELOG" > version_changelog.md

      # Create GitHub Release
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.PROJECT_VERSION }}
          release_name: Release ${{ env.PROJECT_VERSION }}
          body_path: version_changelog.md
          draft: false
          prerelease: false

      # Publish to Maven Central
      - name: Set up JDK for Maven Central
        uses: actions/setup-java@v3
        with:
          distribution: 'oracle'
          java-version: '21'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
#      - id: install-secret-key
#        name: Install gpg secret key
#        run: |
#          # Install gpg secret key
#          cat <(echo -e "${{ secrets.OSSRH_GPG_SECRET_KEY }}") | gpg --batch --import
#          # Verify gpg secret key
#          gpg --list-secret-keys --keyid-format LONG
      - name: Publish to Maven Central
        run: |
          mvn --no-transfer-progress --batch-mode deploy -DskipTests=true -Dgpg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} -P ossrh-release
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.OSSRH_GPG_SECRET_KEY }}